<!-- -*- mode: nxml -*- -->
<configure	xmlns="http://namespaces.zope.org/zope"
			xmlns:i18n="http://namespaces.zope.org/i18n"
			xmlns:zcml="http://namespaces.zope.org/zcml"
			xmlns:ext="http://nextthought.com/ntp/ext"
			i18n_domain="zope">

	<include package="zope.component" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />
	<include package="zope.component" />
	<include package="zope.location" />
	<include package="zope.annotation" />

	<include package="nti.contentfragments" />

	<include package="plone.namedfile" file="z3c-blobfile.zcml" />

	<include package=".contentrendering" file="configure.zcml" />

	<!-- Response types -->

	<adapter factory=".response.QTextResponse"
			 provides=".interfaces.IQTextResponse"
			 for="basestring"/>

	<adapter factory=".response.QTextResponse"
			 provides=".interfaces.IQTextResponse"
			 for="int"/>
	<adapter factory=".response.QTextResponse"
			 provides=".interfaces.IQTextResponse"
			 for="long"/>
	<adapter factory=".response.QTextResponse"
			 provides=".interfaces.IQTextResponse"
			 for="float"/>

	<adapter factory=".response.QDictResponse"
			 provides=".interfaces.IQDictResponse"
			 for="dict" />

	<adapter factory=".response.QListResponse"
			 provides=".interfaces.IQListResponse"
			 for="list" />

	<adapter factory=".response.QFileResponse"
			 provides=".interfaces.IQFileResponse"
			 for=".interfaces.IQUploadedFile" />

	<!-- Solution types -->
	<!-- TODO: This should really be on the ILatexContentFragment -->
	<adapter factory=".solution.QLatexSymbolicMathSolution"
			 provides=".interfaces.IQLatexSymbolicMathSolution"
			 for="basestring"/>

	<adapter factory="int .solution.QMultipleChoiceSolution"
			 provides=".interfaces.IQMultipleChoiceSolution"
			 for="basestring"/>

	<adapter factory="list .solution.QMultipleChoiceMultipleAnswerSolution"
			 provides=".interfaces.IQMultipleChoiceMultipleAnswerSolution"
			 for="list"/>

	<adapter factory="dict .solution.QFillInTheBlankShortAnswerSolution"
			 provides=".interfaces.IQFillInTheBlankShortAnswerSolution"
			 for="dict"/>

	<adapter factory="dict .solution.QFillInTheBlankWithWordBankSolution"
			 provides=".interfaces.IQFillInTheBlankWithWordBankSolution"
			 for="dict"/>

	<adapter factory="float .solution.QNumericMathSolution"
			 provides=".interfaces.IQNumericMathSolution"
			 for="basestring"/>

	<adapter factory="dict .solution.QMatchingSolution"
			 provides=".interfaces.IQMatchingSolution"
			 for="dict"/>

	<adapter factory="dict .solution.QOrderingSolution"
			 provides=".interfaces.IQOrderingSolution"
			 for="dict"/>

	<adapter factory=".solution.QFreeResponseSolution"
			 provides=".interfaces.IQFreeResponseSolution"
			 for="basestring"/>

	<adapter factory=".hint.QTextHint"
			 provides=".interfaces.IQTextHint"
			 for="basestring"/>

	<adapter factory=".hint.QHTMLHint"
			 provides=".interfaces.IQHTMLHint"
			 for="basestring"/>

	<!-- Dealing with LaTeX -->
	<adapter factory="._latexplastexconverter.factory"
			 for=".interfaces.IQLatexSymbolicMathSolution .interfaces.IQTextResponse"
			 provides=".interfaces.IResponseToSymbolicMathConverter" />

	<adapter factory="._latexplastexdomcompare.Grader"
			 for="* .interfaces.IQLatexSymbolicMathSolution .interfaces.IQTextResponse"
			 provides=".interfaces.IQSymbolicMathGrader" />

	<!-- Generic grading -->
	<adapter factory=".graders.StringEqualityGrader"
			 for="* .interfaces.IQSingleValuedSolution .interfaces.IQTextResponse" />

	<adapter factory=".graders.LowerQuoteNormalizedStringEqualityGrader"
			 name="LowerQuoteNormalizedStringEqualityGrader"
			 for="* .interfaces.IQSingleValuedSolution .interfaces.IQTextResponse" />

	<adapter factory=".graders.UnitAwareFloatEqualityGrader"
			 for="* .interfaces.IQNumericMathSolution .interfaces.IQTextResponse" />

	<adapter factory=".graders.MultipleChoiceGrader"
			 for=".interfaces.IQMultipleChoicePart .interfaces.IQSingleValuedSolution .interfaces.IQTextResponse"
			 provides=".interfaces.IQMultipleChoicePartGrader" />

	<adapter factory=".graders.MultipleChoiceMultipleAnswerGrader"
			 for=".interfaces.IQMultipleChoiceMultipleAnswerPart .interfaces.IQMultiValuedSolution .interfaces.IQListResponse"
			 provides=".interfaces.IQMultipleChoiceMultipleAnswerPartGrader" />

	<adapter factory=".graders.MatchingPartGrader"
			 for=".interfaces.IQMatchingPart .interfaces.IQMatchingSolution .interfaces.IQDictResponse"
			 provides=".interfaces.IQMatchingPartGrader" />

	<adapter factory=".graders.OrderingPartGrader"
			 for=".interfaces.IQOrderingPart .interfaces.IQOrderingSolution .interfaces.IQDictResponse"
			 provides=".interfaces.IQOrderingPartGrader" />

	<adapter factory=".graders.FillInTheBlankShortAnswerGrader"
			 for=".interfaces.IQFillInTheBlankShortAnswerPart .interfaces.IQFillInTheBlankShortAnswerSolution .interfaces.IQDictResponse"
			 provides=".interfaces.IQFillInTheBlankShortAnswerGrader" />

	<adapter factory=".graders.FillInTheBlankWithWordBankGrader"
			 for=".interfaces.IQFillInTheBlankWithWordBankPart .interfaces.IQFillInTheBlankWithWordBankSolution .interfaces.IQDictResponse"
			 provides=".interfaces.IQFillInTheBlankWithWordBankGrader" />

	<!-- Incoming submissions can be adapted to finalized assessments -->
	<adapter factory=".assessed.assess_question_submission"
			 for=".interfaces.IQuestionSubmission"
			 provides=".interfaces.IQAssessedQuestion" />

	<adapter factory=".assessed.assess_question_set_submission"
			 for=".interfaces.IQuestionSetSubmission"
			 provides=".interfaces.IQAssessedQuestionSet" />

	<!-- Externalization -->
	<include package="nti.externalization" file="meta.zcml" />
	<include package="nti.externalization" />
	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.IQPart
						 .interfaces.IQuestion
						 .interfaces.IQSolution
						 .interfaces.IQAssignment
						 .interfaces.IQTimedAssignment
						 .interfaces.IQAssignmentPart
						 .interfaces.IQAssignmentSubmissionPendingAssessment
						 .interfaces.IQuestionSubmission
						 .interfaces.IQAssessedPart
						 .interfaces.IQAssessedQuestion
						 .interfaces.IQuestionSetSubmission
						 .interfaces.IQAssessedQuestionSet
						 .interfaces.IQAssignmentSubmission
						 .interfaces.IQResponse
						 .interfaces.IQHint
						 .interfaces.IQuestionSet"
		modules=".hint .assessed .parts .question .response .solution .submission .assignment"
		factory_modules=".submission .question .response"
		iobase=".externalization._AssessmentInternalObjectIOBase"/>

	<adapter factory=".internalization._QFillInTheBlankWithWordBankSolutionUpdater"
			 for=".interfaces.IQFillInTheBlankShortAnswerSolution"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory=".externalization._QAssessedPartExternalizer"
			 for=".interfaces.IQAssessedPart"
			 provides="nti.externalization.interfaces.IInternalObjectExternalizer" />

	<adapter factory=".externalization._QAssessedQuestionExternalizer"
			 for=".interfaces.IQAssessedQuestion"
			 provides="nti.externalization.interfaces.IInternalObjectExternalizer" />

	<adapter factory=".externalization._QAssessedQuestionSetExternalizer"
			 for=".interfaces.IQAssessedQuestionSet"
			 provides="nti.externalization.interfaces.IInternalObjectExternalizer" />

	<adapter factory=".externalization._QuestionSubmissionExternalizer"
			 for=".interfaces.IQuestionSubmission"
			 provides="nti.externalization.interfaces.IInternalObjectExternalizer" />

	<adapter factory=".externalization._QuestionSetSubmissionExternalizer"
			 for=".interfaces.IQuestionSetSubmission"
			 provides="nti.externalization.interfaces.IInternalObjectExternalizer" />

	<!-- WordBank & Regex -->
	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.IWordEntry
						 .interfaces.IWordBank
						 .interfaces.IRegEx"
		modules=".wordbank .regex" />

	<configure zcml:condition="have devmode">
		<adapter factory=".internalization._QModeledContentResponseUpdater"
			 	 for=".interfaces.IQModeledContentResponse"
			 	 provides="nti.externalization.interfaces.IInternalObjectUpdater" />
	</configure>

	<adapter factory="list .wordbank._wordbank_adapter"
			 provides=".interfaces.IWordBank"
			 for="list"/>

	<adapter factory="list .wordbank._wordbank_adapter"
			 provides=".interfaces.IWordBank"
			 for="tuple"/>

	<adapter factory="list .wordbank._wordentry_adapter"
			 provides=".interfaces.IWordEntry"
			 for="list"/>

	<adapter factory="list .wordbank._wordentry_adapter"
			 provides=".interfaces.IWordEntry"
			 for="tuple"/>

	<adapter factory=".internalization._WordEntryUpdater"
			 for=".interfaces.IWordEntry"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory=".regex._regex_str_adapter"
			 provides=".interfaces.IRegEx"
			 for="basestring" />

	<adapter factory="list .regex._regex_collection_adapter"
			 provides=".interfaces.IRegEx"
			 for="list"/>

	<adapter factory="tuple .regex._regex_collection_adapter"
			 provides=".interfaces.IRegEx"
			 for="tuple"/>

	<!-- Decorators -->

	<adapter factory=".decorators._DefaultPartSolutionsExternalizer"
			 for=".interfaces.IQPart"
			 provides=".interfaces.IQPartSolutionsExternalizer" />

	<adapter factory=".decorators._FillInTheBlankShortAnswerPartSolutionsExternalizer"
			 for=".interfaces.IQFillInTheBlankShortAnswerPart"
			 provides=".interfaces.IQPartSolutionsExternalizer" />

	<adapter factory=".decorators._FillInTheBlankWithWordBankPartSolutionsExternalizer"
			 for=".interfaces.IQFillInTheBlankWithWordBankPart"
			 provides=".interfaces.IQPartSolutionsExternalizer" />

	<!-- Display units on math parts -->
	<subscriber
		factory=".decorators._MathPartDecorator"
		for=".interfaces.IQMathPart"
		provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<!-- Give assignments a containerId -->
	<subscriber
		factory=".decorators._QAssessmentObjectIContainedAdder"
		for=".interfaces.IQAssignment"
		provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<!-- Also give questions and sets a containerId, mostly for symmetry -->
	<subscriber
		factory=".decorators._QAssessmentObjectIContainedAdder"
		for=".interfaces.IQuestionSet"
		provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<subscriber
		factory=".decorators._QAssessmentObjectIContainedAdder"
		for=".interfaces.IQuestion"
		provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<subscriber
		factory=".decorators._QAssessmentObjectDecorator"
		for=".interfaces.IQAssignment"
		provides="nti.externalization.interfaces.IExternalObjectDecorator" />
		
	<!--
	File uploads, which are handled manually because
	they deviate from the pattern.
	-->
	<adapter factory=".externalization._QUploadedFileFactory"
			 for="dolmen.builtins.IDict"
			 provides="nti.externalization.interfaces.IMimeObjectFactory"
			 name="application/vnd.nextthought.assessment.uploadedfile" />

	<!-- Temporary workaround for iPad bug JZ - 01.02.2015 -->
	<adapter factory=".externalization._QUploadedFileFactory"
			 for="dolmen.builtins.IDict"
			 provides="nti.externalization.interfaces.IMimeObjectFactory"
			 name="application/vnd.nextthought.assessment.quploadedfile" />

	<adapter factory=".externalization._QUploadedFileObjectIO"
			 for=".interfaces.IQUploadedFile"  />

	<!-- randomized -->
	<include package=".randomized" file="configure.zcml" />

	<!-- Authoring -->
	<include package="." file="plastex.zcml" />

</configure>
